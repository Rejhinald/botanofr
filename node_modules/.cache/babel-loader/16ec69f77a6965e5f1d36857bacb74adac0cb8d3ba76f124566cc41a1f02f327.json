{"ast":null,"code":"import { PLANT_LIST_REQUEST, PLANT_LIST_SUCCESS, PLANT_LIST_FAIL, PLANT_DETAILS_REQUEST, PLANT_DETAILS_SUCCESS, PLANT_DETAILS_FAIL, PLANT_DELETE_REQUEST, PLANT_DELETE_SUCCESS, PLANT_DELETE_FAIL, PLANT_CREATE_REQUEST, PLANT_CREATE_SUCCESS, PLANT_CREATE_FAIL } from \"../constants/plantConstants\";\nimport axios from \"axios\";\nexport const listPlants = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PLANT_LIST_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.get(`https://botan0.pythonanywhere.com/api/plants/`, config);\n    dispatch({\n      type: PLANT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PLANT_LIST_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.messge\n    });\n  }\n};\nexport const listPlantDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: PLANT_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`https://botan0.pythonanywhere.com/api/plants/${id}`);\n    dispatch({\n      type: PLANT_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PLANT_DETAILS_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport const deletePlants = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PLANT_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.delete(`https://botan0.pythonanywhere.com/api/products/delete/${id}/`, config);\n    dispatch({\n      type: PLANT_DELETE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: PLANT_DELETE_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport const createPlants = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PLANT_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-type\": \"multipart/form-data\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`https://botan0.pythonanywhere.com/api/products/create/`, {}, config);\n    dispatch({\n      type: PLANT_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PLANT_CREATE_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport default {\n  listPlants,\n  listPlantDetails,\n  deletePlants,\n  createPlants\n};","map":{"version":3,"names":["PLANT_LIST_REQUEST","PLANT_LIST_SUCCESS","PLANT_LIST_FAIL","PLANT_DETAILS_REQUEST","PLANT_DETAILS_SUCCESS","PLANT_DETAILS_FAIL","PLANT_DELETE_REQUEST","PLANT_DELETE_SUCCESS","PLANT_DELETE_FAIL","PLANT_CREATE_REQUEST","PLANT_CREATE_SUCCESS","PLANT_CREATE_FAIL","axios","listPlants","dispatch","getState","type","userLogin","userInfo","config","headers","data","get","payload","error","response","detail","messge","listPlantDetails","id","message","deletePlants","Authorization","token","delete","createPlants","post"],"sources":["C:/Users/Arwin Miclat/Desktop/Botano/Botano/frontend/src/actions/plantActions.js"],"sourcesContent":["import {\r\n  PLANT_LIST_REQUEST,\r\n  PLANT_LIST_SUCCESS,\r\n  PLANT_LIST_FAIL,\r\n  PLANT_DETAILS_REQUEST,\r\n  PLANT_DETAILS_SUCCESS,\r\n  PLANT_DETAILS_FAIL,\r\n  PLANT_DELETE_REQUEST,\r\n  PLANT_DELETE_SUCCESS,\r\n  PLANT_DELETE_FAIL,\r\n  PLANT_CREATE_REQUEST,\r\n  PLANT_CREATE_SUCCESS,\r\n  PLANT_CREATE_FAIL,\r\n} from \"../constants/plantConstants\";\r\nimport axios from \"axios\";\r\n\r\nexport const listPlants = () => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: PLANT_LIST_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.get(\r\n      `https://botan0.pythonanywhere.com/api/plants/`,\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: PLANT_LIST_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: PLANT_LIST_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.messge,\r\n    });\r\n  }\r\n};\r\n\r\nexport const listPlantDetails = (id) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: PLANT_DETAILS_REQUEST,\r\n    });\r\n\r\n    const { data } = await axios.get(\r\n      `https://botan0.pythonanywhere.com/api/plants/${id}`\r\n    );\r\n\r\n    dispatch({\r\n      type: PLANT_DETAILS_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: PLANT_DETAILS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const deletePlants = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: PLANT_DELETE_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.delete(\r\n      `https://botan0.pythonanywhere.com/api/products/delete/${id}/`,\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: PLANT_DELETE_SUCCESS,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: PLANT_DELETE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const createPlants = () => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: PLANT_CREATE_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"multipart/form-data\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.post(\r\n      `https://botan0.pythonanywhere.com/api/products/create/`,\r\n      {},\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: PLANT_CREATE_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: PLANT_CREATE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport default { listPlants, listPlantDetails, deletePlants, createPlants };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}